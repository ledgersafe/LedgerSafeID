################################################################################
#
#   ORGANIZATIONS
#
#   This section defines the organizational identities that can be referenced
#   in the configuration profiles.
#
################################################################################
Organizations:
    # &LedgerSafe defines an MSP
    - &LedgerSafe
        # Name is the key by which this org will be referenced in channel
        Name: LedgerSafe
        # ID is the key by which this org's MSP definition will be referenced.
        ID: LS
        # MSPDir is the filesystem path which contains the MSP configuration.
        MSPDir: msp
        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: &LedgerSafePolicies
            Readers:
                Type: Signature
                Rule: "OR('LedgerSafe.regulator','LedgerSafe.business','LedgerSafe.fi')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('LedgerSafe.admin', 'LedgerSafe.peer', 'LedgerSafe.client')"
            Writers:
                Type: Signature
                Rule: "OR('LedgerSafe.business','LedgerSafe.fi')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('LedgerSafe.admin', 'LedgerSafe.client')"
            Admins:
                Type: Signature
                Rule: "OR('LedgerSafe.admin')"
        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: 127.0.0.1
              Port: 7051

################################################################################
#
#   CAPABILITIES
#   This section defines the capabilities of fabric network. 
################################################################################
Capabilities:
    # Channel capabilities apply to both the orderers and the peers and must be
    # supported by both.  Set the value of the capability to true to require it.
    Channel: &ChannelCapabilities
        # V1.1 for Channel is a catchall flag for behavior
        V1_1: true
    # Orderer capabilities apply only to the orderers, and may be safely
    # manipulated without concern for upgrading peers. 
    Orderer: &OrdererCapabilities
        # V1.1 for Order is a catchall flag for behavior
        V1_1: true
    # Application capabilities apply only to the peer network, and may be
    # safely manipulated without concern for upgrading orderers.
    Application: &ApplicationCapabilities
        # V1.2 for Application enables the new non-backwards compatible features
        V1_2: true
        # V1.1 for Application enables the new non-backwards compatible features
        V1_1: false

################################################################################
#
#   APPLICATION
#
#   This section defines the values to encode into a config transaction or
#   genesis block for application-related parameters.
#
################################################################################
Application: &ApplicationDefaults
    ACLs: &ACLsDefault
        # This section provides defaults for policies for various resources
        # in the system.
        lscc/ChaincodeExists: /Channel/Application/Readers

        # ACL policy for lscc's "getdepspec" function
        lscc/GetDeploymentSpec: /Channel/Application/Readers

        # ACL policy for lscc's "getccdata" function
        lscc/GetChaincodeData: /Channel/Application/Readers

        # ACL Policy for lscc's "getchaincodes" function
        lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

        #---Query System Chaincode (qscc) function to policy mapping for access control---#

        # ACL policy for qscc's "GetChainInfo" function
        qscc/GetChainInfo: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByNumber" function
        qscc/GetBlockByNumber: /Channel/Application/Readers

        # ACL policy for qscc's  "GetBlockByHash" function
        qscc/GetBlockByHash: /Channel/Application/Readers

        # ACL policy for qscc's "GetTransactionByID" function
        qscc/GetTransactionByID: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByTxID" function
        qscc/GetBlockByTxID: /Channel/Application/Readers

        #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

        # ACL policy for cscc's "GetConfigBlock" function
        cscc/GetConfigBlock: /Channel/Application/Readers

        # ACL policy for cscc's "GetConfigTree" function
        cscc/GetConfigTree: /Channel/Application/Readers

        # ACL policy for cscc's "SimulateConfigTreeUpdate" function
        cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

        #---Miscellanesous peer function to policy mapping for access control---#

        # ACL policy for invoking chaincodes on peer
        peer/Propose: /Channel/Application/Writers

        # ACL policy for chaincode to chaincode invocation
        peer/ChaincodeToChaincode: /Channel/Application/Readers

        #---Events resource to policy mapping for access control###---#

        # ACL policy for sending block events
        event/Block: /Channel/Application/Readers

        # ACL policy for sending filtered block events
        event/FilteredBlock: /Channel/Application/Readers

    # Organizations lists the orgs participating on the application side of the
    # network.
    Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Application policies, their canonical path is
    #   /Channel/Application/<PolicyName>
    Policies: &ApplicationDefaultPolicies
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities describes the application level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ApplicationCapabilities

################################################################################
#
#   ORDERER
#
#   This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters.
#
################################################################################
Orderer: &OrdererDefaults

    # Orderer Type: The orderer implementation to start.
    # Available types are "solo" and "kafka".
    OrdererType: solo

    # Addresses here is a nonexhaustive list of orderers the peers and clients can
    # connect to. Adding/removing nodes from this list has no impact on their
    # participation in ordering.
    # NOTE: In the solo case, this should be a one-item list.
    Addresses:
        - 127.0.0.1:7050

    # Batch Timeout: The amount of time to wait before creating a batch.
    BatchTimeout: 2s

    # Batch Size: Controls the number of messages batched into a block.
    BatchSize:
        MaxMessageCount: 10
        AbsoluteMaxBytes: 10 MB
        PreferredMaxBytes: 512 KB
    MaxChannels: 0
    Kafka:
        Brokers:
            - kafka0:9092
            - kafka1:9092
            - kafka2:9092

    # Organizations lists the orgs participating on the orderer side of the
    # network.
    Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
    # TBD
    
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"
        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"

    # Capabilities describes the orderer level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *OrdererCapabilities

################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
    # Policies defines the set of policies at this level of the config tree
    # For Channel policies, their canonical path is
    #   /Channel/<PolicyName>
    Policies:
        # Who may invoke the 'Deliver' API
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        # Who may invoke the 'Broadcast' API
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        # By default, who may modify elements at this config level
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"


    # Capabilities describes the channel level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ChannelCapabilities

################################################################################
#
#   PROFILES
#
#   Different configuration profiles may be encoded here to be specified as
#   parameters to the configtxgen tool. The profiles which specify consortiums
#   are to be used for generating the orderer genesis block. With the correct
#   consortium members defined in the orderer genesis block, channel creation
#   requests may be generated with only the org member names and a consortium
#   name.
#
################################################################################
Profiles:

    # LedgerSafeSingleMSPSolo defines a configuration which uses the Solo orderer,
    # and contains a single MSP definition (the MSP LedgerSafeconfig).
    # The Consortium LedgerSafeConsortium has only a single member, LedgerSafe.
    LedgerSafeSingleMSPSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *LedgerSafe
        Consortiums:
            LedgerSafeConsortium:
                Organizations:
                    - *LedgerSafe

    # LedgerSafeSingleMSPKafka defines a configuration that differs from the
    # LedgerSafeSingleMSPSolo one only in that it uses the Kafka-based orderer.
    LedgerSafeSingleMSPKafka:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
            Organizations:
                - *LedgerSafe
        Consortiums:
            LedgerSafeConsortium:
                Organizations:
                    - *LedgerSafe

    # LedgerSafeInsecureSolo defines a configuration which uses the Solo orderer,
    # contains no MSP definitions, and allows all transactions and channel
    # creation requests for the consortium LedgerSafeConsortium.
    LedgerSafeInsecureSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
        Consortiums:
            LedgerSafeConsortium:
                Organizations:

    # LedgerSafeInsecureKafka defines a configuration that differs from the
    # LedgerSafeInsecureSolo one only in that it uses the Kafka-based orderer.
    LedgerSafeInsecureKafka:
        <<: *ChannelDefaults
        Orderer:
            OrdererType: kafka
            <<: *OrdererDefaults
        Consortiums:
            LedgerSafeConsortium:
                Organizations:

    # LedgerSafeDevModeSolo defines a configuration which uses the Solo orderer,
    # contains the LedgerSafe MSP as both orderer and consortium member, and
    # requires only basic membership for admin privileges. It also defines
    # an Application on the ordering system channel, which should usually
    # be avoided.
    LedgerSafeDevModeSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - <<: *LedgerSafe
                  Policies:
                      <<: *LedgerSafePolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('LedgerSafe.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *LedgerSafe
                  Policies:
                      <<: *LedgerSafePolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('LedgerSafe.member')"
        Consortiums:
            LedgerSafeConsortium:
                Organizations:
                    - <<: *LedgerSafe
                      Policies:
                          <<: *LedgerSafePolicies
                          Admins:
                              Type: Signature
                              Rule: "OR('LedgerSafe.member')"

    # LedgerSafeDevModeKafka defines a configuration that differs from the
    # LedgerSafeDevModeSolo one only in that it uses the Kafka-based orderer.
    LedgerSafeDevModeKafka:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
            Organizations:
                - <<: *LedgerSafe
                  Policies:
                      <<: *LedgerSafePolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('LedgerSafe.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *LedgerSafe
                  Policies:
                      <<: *LedgerSafePolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('LedgerSafe.member')"
        Consortiums:
            LedgerSafeConsortium:
                Organizations:
                    - <<: *LedgerSafe
                      Policies:
                          <<: *LedgerSafePolicies
                          Admins:
                              Type: Signature
                              Rule: "OR('LedgerSafe.member')"

    # LedgerSafeSingleMSPChannel defines a channel with only the LedgerSafe org as a
    # member. It is designed to be used in conjunction with LedgerSafeSingleMSPSolo
    # and LedgerSafeSingleMSPKafka orderer profiles.   Note, for channel creation
    # profiles, only the 'Application' section and consortium # name are
    # considered.
    LedgerSafeSingleMSPChannel:
        Consortium: LedgerSafeConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *LedgerSafe